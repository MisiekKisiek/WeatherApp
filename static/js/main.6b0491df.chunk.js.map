{"version":3,"sources":["img/logo.png","components/Input.js","components/CoolResult.js","components/NegativeResult.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","props","change","city","submit","className","action","type","onChange","value","placeholder","onClick","CoolResults","conditions","date","time","temp","pressure","wind","sunrise","sunset","clouds","txt","splice","active","length","Math","round","Date","toLocaleTimeString","NegativeResult","Result","err","App","state","choosenCity","handleInputChange","e","setState","target","handleSubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","curDate","getDay","getMonth","getFullYear","curTime","getHours","getMinutes","prevState","main","speed","sys","all","catch","alert","src","require","alt","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.6b0491df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5964c2da.png\";","import React from \"react\";\r\nimport \"../styles/Input.css\";\r\n\r\nconst Input = props => {\r\n  const { change, city, submit } = props;\r\n  return (\r\n    <div className=\"input\">\r\n      <form action=\"\">\r\n        <label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={change}\r\n            value={city}\r\n            placeholder={\"Enter city...\"}\r\n          />\r\n          <button onClick={submit}>Check</button>\r\n        </label>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport \"../styles/CoolResult.css\";\r\n\r\nconst CoolResults = props => {\r\n  const {\r\n    city,\r\n    date,\r\n    time,\r\n    temp,\r\n    pressure,\r\n    wind,\r\n    sunrise,\r\n    sunset,\r\n    clouds\r\n  } = props.conditions;\r\n  let txt = [...city];\r\n  txt.splice(0, 1);\r\n  return (\r\n    <div className={`coolResult ${props.conditions.active}`}>\r\n      <h1>\r\n        {city.length > 12 ? (\r\n          <span className=\"last\">This city</span>\r\n        ) : (\r\n          <>\r\n            <span>{city[0]}</span>\r\n            <span className=\"last\">{txt}</span>\r\n          </>\r\n        )}\r\n        {\"  \"}\r\n        {clouds > 85 ? (\r\n          <i className=\"fas fa-cloud\"></i>\r\n        ) : clouds > 25 ? (\r\n          <i className=\"fas fa-cloud-sun\"></i>\r\n        ) : (\r\n          <i className=\"fas fa-sun\"></i>\r\n        )}\r\n      </h1>\r\n\r\n      <span>\r\n        Date: <strong>{date}</strong>\r\n      </span>\r\n      <span>\r\n        Time: <strong>{time}</strong>\r\n      </span>\r\n      <span>\r\n        Temperature:{\" \"}\r\n        <strong>\r\n          {Math.round(temp - 273.15)} <i className=\"fas fa-genderless\"></i>C\r\n        </strong>\r\n      </span>\r\n      <span>\r\n        Pressure: <strong>{pressure} hPa</strong>\r\n      </span>\r\n      <span>\r\n        Wind speed: <strong>{wind} m/s</strong>\r\n      </span>\r\n      <span>\r\n        Sunrise:{\" \"}\r\n        <strong>{new Date(sunrise * 1000).toLocaleTimeString()}</strong>\r\n      </span>\r\n      <span>\r\n        Sunset: <strong>{new Date(sunset * 1000).toLocaleTimeString()}</strong>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoolResults;\r\n","import React from \"react\";\r\nimport \"../styles/NegativeResult.css\";\r\n\r\nconst NegativeResult = () => {\r\n  return <h1>Sorry, we dont have that city</h1>;\r\n};\r\n\r\nexport default NegativeResult;\r\n","import React from \"react\";\r\nimport CoolResult from \"./CoolResult\";\r\nimport NegativeResult from \"./NegativeResult.js\";\r\n\r\nconst Result = props => {\r\n  return (\r\n    <div className=\"result\">\r\n      {props.conditions.city ? (\r\n        props.err ? (\r\n          <NegativeResult />\r\n        ) : (\r\n          <CoolResult conditions={props.conditions} />\r\n        )\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\nimport \"../styles/App.css\";\nimport Input from \"./Input\";\nimport Result from \"./Result\";\n\nclass App extends Component {\n  state = {\n    choosenCity: \"\",\n    city: \"\",\n    date: \"\",\n    time: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    clouds: \"\",\n    active: \"\",\n    err: \"\"\n  };\n\n  handleInputChange = e => {\n    this.setState({\n      choosenCity: e.target.value\n      // active: \"\"\n    });\n  };\n\n  handleSubmit = e => {\n    this.setState({\n      active: \"\"\n    });\n    e.preventDefault();\n    const API = `//api.openweathermap.org/data/2.5/weather?q=${this.state.choosenCity}&appid=94db56f27673f6979fd810e386b6e61a`;\n    fetch(API)\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Nie udało się\");\n      })\n      .then(response => response.json())\n      .then(data => {\n        const date = new Date();\n        const curDate = `${\n          date.getDay() < 10 ? \"0\" + date.getDay() : date.getDay()\n        }.${\n          date.getMonth() < 10 ? \"0\" + date.getMonth() : date.getMonth()\n        }.${date.getFullYear()}`;\n        const curTime = `${\n          date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours()\n        }:${\n          date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes()\n        }`;\n        this.setState(prevState => ({\n          active: \"active\",\n          choosenCity: \"\",\n          err: false,\n          city: prevState.choosenCity,\n          date: curDate,\n          time: curTime,\n          temp: data.main.temp,\n          pressure: data.main.pressure,\n          wind: data.wind.speed,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          clouds: data.clouds.all\n        }));\n      })\n      .catch(err => {\n        alert(`Error ${err}`);\n        this.setState({\n          err: true\n        });\n      });\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"app\">\n          <div className=\"logo\">\n            <img src={require(\"../img/logo.png\")} alt=\"\" />\n          </div>\n          <Input\n            change={this.handleInputChange}\n            city={this.state.choosenCity}\n            submit={this.handleSubmit}\n          />\n          <Result err={this.state.err} conditions={this.state} />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}